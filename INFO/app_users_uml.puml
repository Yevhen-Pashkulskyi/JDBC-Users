@startuml
class org.example.app.App {
+ {static} void main(String[])
}

class org.example.app.controller.UserController {
~ UserService service
+ void create()
+ void read()
+ void update()
+ void delete()
+ void readById()
}


class org.example.app.utils.AppValidator {
+ {static} String ID_RGX
+ {static} String EMAIL_RGX
+ {static} boolean isIdValid(String)
+ {static} boolean isEmailValid(String)
}


class org.example.app.repository.impl.UserRepository {
- {static} String TABLE_USERS
+ String create(User)
+ Optional<List<User>> read()
+ String update(User)
+ String delete(Long)
+ Optional<User> readById(Long)
- boolean isIdExists(Long)
}


interface org.example.app.repository.AppRepository {
~ String create(T)
~ Optional<List<T>> read()
~ String update(T)
~ String delete(Long)
~ Optional<T> readById(Long)
}

class org.example.app.entity.UserMapper {
+ User mapData(Map<String,String>)
}

class org.example.app.view.UserUpdateView {
+ Map<String,String> getData()
+ void getOutput(String)
}

class org.example.app.controller.AppController {
~ AppView view
~ AppService service
+ void runApp()
}


class org.example.app.entity.User {
- Long id
- String firstName
- String email
+ Long getId()
+ void setId(Long)
+ String getFirstName()
+ void getName(String)
+ String getEmail()
+ void setEmail(String)
+ String toString()
}


class org.example.app.view.UserReadByIdView {
+ Map<String,String> getData()
+ void getOutput(String)
}

class org.example.app.database.DBConnect {
+ {static} Connection connect()
}

class org.example.app.view.UserDeleteView {
+ Map<String,String> getData()
+ void getOutput(String)
}

class org.example.app.service.AppService {
~ UserController controller
+ void handleOption(int)
}


class org.example.app.utils.AppStarter {
+ {static} void startApp()
}

class org.example.app.view.UserCreateView {
+ Map<String,String> getData()
+ void getOutput(String)
}

class org.example.app.view.AppView {
+ int getOption()
- void getMenu()
+ void getOutput(String)
}

class org.example.app.service.UserService {
~ UserRepository repository
+ String create(Map<String,String>)
+ String read()
+ String update(Map<String,String>)
+ String delete(Map<String,String>)
+ String readById(Map<String,String>)
}


class org.example.app.utils.UserValidator {
+ Map<String,String> validateContactData(Map<String,String>)
}

class org.example.app.utils.Constants {
+ {static} String WRONG_EMAIL_MSG
+ {static} String WRONG_ID_MSG
+ {static} String DATA_ABSENT_MSG
+ {static} String DATA_INSERT_MSG
+ {static} String DATA_UPDATE_MSG
+ {static} String DATA_DELETE_MSG
+ {static} String APP_CLOSE_MSG
+ {static} String INPUT_REQ_MSG
+ {static} String INCORRECT_VALUE_MSG
+ {static} String INCORRECT_OPTION_MSG
}

class org.example.app.exceptions.OptionException {
}
class org.example.app.exceptions.UserException {
~ Map<String,String> errors
+ String getErrors(Map<String,String>)
}


class org.example.app.view.UserReadView {
+ void getOutput(String)
}



org.example.app.repository.AppRepository <|.. org.example.app.repository.impl.UserRepository
org.example.app.exceptions.Exception <|-- org.example.app.exceptions.OptionException
org.example.app.exceptions.RuntimeException <|-- org.example.app.exceptions.UserException
@enduml